<?xml version='1.0' standalone='yes'?>
<!DOCTYPE PLUGIN [
<!ENTITY name                 "luks-key-management">
<!ENTITY author               "SpaceInvaderOne">
<!ENTITY plugin_version       "2025.08.18.1358">
<!ENTITY launch_page          "Settings/&name;">
<!ENTITY plugin_url           "https://github.com/SpaceinvaderOne/Luks_tools/raw/main/packages/pluginmain/luks-key-management-2025.08.18.1358-x86_64.txz">
<!ENTITY plugin_md5           "d4457bb71631e17421c3a6c1b03ae296">
]>

<PLUGIN name="&name;" author="&author;" version="&plugin_version;" min="6.9.0" launch="&launch_page;" icon="key">

<CHANGES>
### 2025.07.10
- Initial release of the LUKS Key Management plugin.
</CHANGES>

<!-- 
  This file is the installer for the plugin. It downloads a .txz package,
  which contains all the necessary PHP, HTML, and Shell scripts, and installs
  them to the correct locations on your Unraid server.
-->

<!-- INSTALLATION: Downloads and installs the main plugin package. -->

<!-- Step 1: Remove any previous installation of this plugin to ensure a clean install. -->
<FILE Run="/bin/bash">
<INLINE>
removepkg &name;-&plugin_version;-x86_64
</INLINE>
</FILE>

<!-- Step 2: Download and install the new package. -->
<FILE Name="/boot/config/plugins/&name;/&name;-&plugin_version;-x86_64.txz" Run="upgradepkg --install-new">
  <URL>&plugin_url;</URL>
  <MD5>&plugin_md5;</MD5>
</FILE>

<!-- POST-INSTALL: Setup plugin scripts and event infrastructure -->
<FILE Run="/bin/bash">
<INLINE><![CDATA[
echo ""
echo "----------------------------------------------------"
echo " Setting up plugin scripts and event infrastructure..."
echo "----------------------------------------------------"

PLUGIN_SCRIPTS_DIR="/usr/local/emhttp/plugins/luks-key-management/scripts"
PERSISTENT_DIR="/boot/config/plugins/luks-key-management"
EVENT_STARTING_DIR="/usr/local/emhttp/webGui/event/starting"
EVENT_STARTED_DIR="/usr/local/emhttp/webGui/event/started"

# Create persistent directory
mkdir -p "$PERSISTENT_DIR"
echo " Created persistent directory: $PERSISTENT_DIR"

# Create event directories
mkdir -p "$EVENT_STARTING_DIR"
mkdir -p "$EVENT_STARTED_DIR"
echo " Created event directories for auto-unlock functionality"

# Create version file for display in plugin UI by extracting from package filename
PACKAGE_FILE=$(ls "$PERSISTENT_DIR"/luks-key-management-*.txz 2>/dev/null | head -1)
if [[ -n "$PACKAGE_FILE" ]]; then
    VERSION=$(basename "$PACKAGE_FILE" | sed 's/luks-key-management-\(.*\)-x86_64\.txz/\1/')
    echo "$VERSION" > "$PERSISTENT_DIR/VERSION"
    echo " Created version file: $PERSISTENT_DIR/VERSION (version: $VERSION)"
else
    echo "Unknown" > "$PERSISTENT_DIR/VERSION"
    echo " Warning: Could not determine version, set to Unknown"
fi

# Create plugin config file with default settings
CONFIG_FILE="$PERSISTENT_DIR/config"
if [[ ! -f "$CONFIG_FILE" ]]; then
    echo "AUTO_UNLOCK_ENABLED=false" > "$CONFIG_FILE"
    echo " Created plugin config file with auto-unlock disabled by default"
fi

# Set executable permissions on plugin scripts
if [[ -d "$PLUGIN_SCRIPTS_DIR" ]]; then
    chmod +x "$PLUGIN_SCRIPTS_DIR"/*.sh 2>/dev/null || true
    chmod +x "$PLUGIN_SCRIPTS_DIR"/*.php 2>/dev/null || true
    echo " Set permissions for plugin script files"
else
    echo " Warning: Scripts directory not found at $PLUGIN_SCRIPTS_DIR"
fi

# Copy scripts to persistent location for event system use
if [[ -f "$PLUGIN_SCRIPTS_DIR/fetch_key.sh" ]]; then
    cp "$PLUGIN_SCRIPTS_DIR/fetch_key.sh" "$PERSISTENT_DIR/fetch_key"
    chmod +x "$PERSISTENT_DIR/fetch_key"
    echo " Copied fetch_key script to persistent location"
else
    echo " Warning: fetch_key.sh not found in $PLUGIN_SCRIPTS_DIR"
fi

if [[ -f "$PLUGIN_SCRIPTS_DIR/delete_key.sh" ]]; then
    cp "$PLUGIN_SCRIPTS_DIR/delete_key.sh" "$PERSISTENT_DIR/delete_key"
    chmod +x "$PERSISTENT_DIR/delete_key"
    echo " Copied delete_key script to persistent location"
else
    echo " Warning: delete_key.sh not found in $PLUGIN_SCRIPTS_DIR"
fi

# Check if auto-unlock is enabled and recreate event files if needed
CONFIG_FILE="$PERSISTENT_DIR/config"
if [[ -f "$CONFIG_FILE" ]]; then
    source "$CONFIG_FILE"
    if [[ "$AUTO_UNLOCK_ENABLED" == "true" ]]; then
        echo " Auto-unlock is enabled - creating event files for boot..."
        
        # Create event directories
        mkdir -p "$EVENT_STARTING_DIR"
        mkdir -p "$EVENT_STARTED_DIR"
        
        # Copy scripts to event directories (same as old working plugin)
        if [[ -f "$PERSISTENT_DIR/fetch_key" ]] && [[ -f "$PERSISTENT_DIR/delete_key" ]]; then
            install -D "$PERSISTENT_DIR/fetch_key" "$EVENT_STARTING_DIR/fetch_key"
            install -D "$PERSISTENT_DIR/delete_key" "$EVENT_STARTED_DIR/delete_key"
            chmod +x "$EVENT_STARTING_DIR/fetch_key" "$EVENT_STARTED_DIR/delete_key"
            echo " ✅ Event files created - auto-unlock ready"
        else
            echo " ⚠️  Source scripts not found - auto-unlock may not work"
        fi
    else
        echo " Auto-unlock is disabled - no event files created"
    fi
else
    echo " No config file found - auto-unlock disabled by default"
    # Ensure any existing event files are removed
    rm -f "$EVENT_STARTING_DIR/fetch_key"
    rm -f "$EVENT_STARTED_DIR/delete_key"
fi

echo ""
echo "----------------------------------------------------"
echo " luks-key-management version &plugin_version; has been installed."
echo " Event infrastructure ready - auto-unlock managed automatically"
echo " Scripts are available at: $PERSISTENT_DIR"
echo "----------------------------------------------------"
echo ""
]]></INLINE>
</FILE>

<!-- UNINSTALL: Complete cleanup including event scripts -->
<FILE Run="/bin/bash" Method="remove">
<INLINE><![CDATA[
echo ""
echo "----------------------------------------------------"
echo " Performing complete luks-key-management cleanup..."
echo "----------------------------------------------------"

# FIRST: Remove event scripts (disable auto-unlock)
EVENT_STARTING_DIR="/usr/local/emhttp/webGui/event/starting"
EVENT_STARTED_DIR="/usr/local/emhttp/webGui/event/started"

if [[ -f "$EVENT_STARTING_DIR/fetch_key" ]]; then
    rm "$EVENT_STARTING_DIR/fetch_key"
    echo " Removed fetch_key event script"
fi

if [[ -f "$EVENT_STARTED_DIR/delete_key" ]]; then
    rm "$EVENT_STARTED_DIR/delete_key"
    echo " Removed delete_key event script"
fi

# Remove any legacy go file modifications (from previous versions)
GO_FILE="/boot/config/go"
START_MARKER="# auto unlock block start"
END_MARKER="# auto unlock block end"

if [[ -f "$GO_FILE" ]] && grep -q "$START_MARKER" "$GO_FILE"; then
    echo " Removing legacy auto-unlock block from go file..."
    sed -i.bak "/$START_MARKER/,$END_MARKER/d" "$GO_FILE"
    echo " Legacy auto-unlock block removed (backup saved as ${GO_FILE}.bak)"
fi

# Remove plugin packages from the system
echo " Removing plugin packages..."
for pkg in $(ls /var/log/packages/ | grep "^luks-key-management-" 2>/dev/null); do
    removepkg "$pkg" 2>/dev/null || true
done

# Clean up plugin directory 
PLUGIN_DIR="/usr/local/emhttp/plugins/luks-key-management"
if [[ -d "$PLUGIN_DIR" ]]; then
    echo " Removing plugin files from $PLUGIN_DIR"
    rm -rf "$PLUGIN_DIR" 2>/dev/null || true
fi

# Clean up persistent config directory (includes our copied scripts)
CONFIG_DIR="/boot/config/plugins/luks-key-management"
if [[ -d "$CONFIG_DIR" ]]; then
    echo " Removing persistent files from $CONFIG_DIR"
    rm -rf "$CONFIG_DIR" 2>/dev/null || true
fi

# Clean up legacy driveunlock directory if it exists (from older versions)
LEGACY_DIR="/boot/config/driveunlock"
if [[ -d "$LEGACY_DIR" ]]; then
    echo " Removing legacy driveunlock directory: $LEGACY_DIR"
    rm -rf "$LEGACY_DIR" 2>/dev/null || true
fi

# Note about LUKS header backups (intentionally preserved for security)
LUKS_BACKUP_DIR="/boot/config/luksheaders"
if [[ -d "$LUKS_BACKUP_DIR" ]]; then
    echo " Note: LUKS header backups preserved in $LUKS_BACKUP_DIR for security"
fi

echo ""
echo "----------------------------------------------------"
echo " Complete cleanup finished - system restored to pre-install state"
echo " luks-key-management has been successfully removed."
echo "----------------------------------------------------"
echo ""
]]></INLINE>
</FILE>

</PLUGIN>
